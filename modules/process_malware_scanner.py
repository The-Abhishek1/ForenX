# modules/process_malware_scanner.py

from typing import List, Dict,Optional, Tuple
import re
import hashlib

def get_executable_from_cmd(cmd: str) -> Optional[str]:
    if not cmd:
        return None
    
    parts = cmd.split()
    for tok in parts:
        if tok.startswith("/"):
            tok = tok.strip("\',")
            return tok
    
    return None

def compute_file_hashes(path: str) -> Dict[str, str]:
    hashes = {"md5":"", "sha1":"", "sha256":""}
    try:
        h_md5 = hashlib.md5()
        h_sha1 = hashlib.sha1()
        h_sha256 = hashlib.sha256()
        
        with open(path, "rb") as f:
            while True:
                chunk = f.read(1024 * 1024)
                if not chunk:
                    break
                h_md5.update(chunk)
                h_sha1.update(chunk)
                h_sha256.update(chunk)
                
        
        hashes["md5"] = h_md5.hexdigest()
        hashes["sha1"] = h_sha1.hexdigest()
        hashes["sha256"] = h_sha256.hexdigest()
        
    except Exception as e:
        pass
    
    return hashes


def load_whitelist(whitelist_path: str) -> Dict[str, set]:
    result = {"paths":set(), "hashes": set()}
    try:
        with open(whitelist_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        
        for p in data.get("paths", []):
            result["paths"].add(str(p))
            
        for h in data.get("hashes", []):
            result["hashes"].add(str(h).lower())
            
    
    except Exception:
        pass
    
    return result


def detect_suspicious(processes: List[str]) -> List[str]:
    suspicious = []
    tmp_paths = ("/tmp", "/dev/shm", "/var/tmp")
    fake_names = ["svch0st", "crondd", "sshd2", "system32", "initd", "apache2d" ]
    ip_pattern = re.compile(r"\b\d{1,3}(?:\.\d{1,3}){3}\b")
    
    for proc in processes:
        flags = []
        
        if any(path in proc for path in tmp_paths):
            flags.append("Running from temp dir")
        
        if any(name in proc.lower() for name in fake_names):
            flags.append("Suspicious name pattern")
        
        if "User=root" in proc and not any(x in proc for x in ["sshd", "systemd", "init", "bash"]):
            flags.append("Root process not in whitelist")
        
        if ip_pattern.search(proc):
            flags.append("Contains IP address")
            
        m = re.search(r"CPU=(\d+\.\d+)% \| MEM=(\d+\.\d+)%", proc)
        if m:
            cpu, mem = float(m.group(1), float(m.group(2)))
            if cpu > 50 or mem > 40:
                flags.append("High resource usage")
        
        if flags:
            suspicious.append(f"[!] {proc}\n     â†’ Reasons: {', '.join(flags)}")
         
           
        WHITELIST_FILE = "config/whitelist.json"
        whitelist = load_whitelist(WHITELIST_FILE)
        cmd_part = None
        if "CMD=" in proc:
            try:
                cmd_part = proc.split("CMD=", 1)[1]
            except Exception:
                cmd_part = None

        exec_path = None
        if cmd_part:
            exec_path = get_executable_from_cmd(cmd_part)

        if exec_path:
            if exec_path in whitelist.get("paths", set()):
                pass
            else:
                hashes = compute_file_hashes(exec_path)
                md5_tag = f"md5:{hashes.get('md5','')}".lower()
                sha256_tag = f"sha256:{hashes.get('sha256','')}".lower()
                if md5_tag in whitelist.get("hashes", set()) or sha256_tag in whitelist.get("hashes", set()):
                    pass
                else:
                    if not hashes.get("md5"):
                        suspicious.append("binary_missing_or_unreadable")
                    else:
                        suspicious.append(f"binary_not_whitelisted md5={hashes.get('md5')[:12]}")
    
    return suspicious


def parse_process_list(file_path: str) -> List[str]:
    processes = []
    with open(file_path, "r") as f:
        lines = f.readlines()
        
    for line in lines[1:]:
        parts = line.split(maxsplit=10)
        if len(parts) < 11:
            continue
        
        user, pid, cpu, mem, vsz, rss, tty, stat, start, time, commad = parts
        entry = f"[PROC] PID={pid} | USER={user} | CPU={cpu} | MEM={mem} | VSZ={vsz} | RSS={rss} | TTY={tty} | STAT={stat} | START={start} | TIME={time} | CMD={commad}"
        processes.append(entry)
    
    return detect_suspicious(processes)



results = parse_process_list("samples/ps_dump.txt")

for r in results:
    print(f"{r}")
    